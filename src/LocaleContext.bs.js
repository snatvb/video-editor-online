// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import EnJson from "./locales/en.json";
import RuJson from "./locales/ru.json";
import * as Helpers$AppTemplateReasonReact from "./Helpers.bs.js";

var en = EnJson;

var ru = RuJson;

var locales = {
  ru: ru,
  en: en
};

function genTextsByLocale(locale) {
  return Caml_option.undefined_to_opt((locales[locale]));
}

var unknownString = "UNKNOWN_STRING";

var storageKey = "locale";

function read(obj, path) {
  var value = Helpers$AppTemplateReasonReact.path(Caml_option.some(obj), path);
  if (value !== undefined) {
    return Caml_option.valFromOption(value);
  } else {
    return unknownString;
  }
}

function get(locale, path) {
  return Belt_Option.mapWithDefault(genTextsByLocale(locale), unknownString, (function (__x) {
                return read(__x, path);
              }));
}

var getAsReactStr = get;

function initialContext_changeLocale(param) {
  
}

var initialContext = {
  locale: "en",
  changeLocale: initialContext_changeLocale
};

var context = React.createContext(initialContext);

var systemLocale = Belt_Option.getWithDefault(Belt_Array.get((navigator.language || navigator.userLanguage).split("-"), 0), "en").toLocaleLowerCase();

function readFromStorage(param) {
  return Belt_Option.getWithDefault(Belt_Option.flatMap(Helpers$AppTemplateReasonReact.optionOr(Caml_option.null_to_opt(localStorage.getItem(storageKey)), systemLocale), (function (str) {
                    switch (str) {
                      case "en" :
                          return "en";
                      case "ru" :
                          return "ru";
                      default:
                        return ;
                    }
                  })), "en");
}

var provider = context.Provider;

function LocaleContext$Provider(Props) {
  var children = Props.children;
  var match = React.useState(function () {
        return readFromStorage(undefined);
      });
  var setLocale = match[1];
  var locale = match[0];
  var changeLocale = function (loc) {
    return Curry._1(setLocale, (function (param) {
                  return loc;
                }));
  };
  React.useEffect((function () {
          localStorage.setItem(storageKey, locale);
          
        }), [locale]);
  return React.createElement(provider, {
              value: {
                locale: locale,
                changeLocale: changeLocale
              },
              children: children
            });
}

var Provider = {
  systemLocale: systemLocale,
  readFromStorage: readFromStorage,
  provider: provider,
  make: LocaleContext$Provider
};

function useLocaleContext(param) {
  return React.useContext(context);
}

function useLocale(param) {
  return React.useContext(context).locale;
}

export {
  en ,
  ru ,
  locales ,
  genTextsByLocale ,
  unknownString ,
  storageKey ,
  read ,
  get ,
  getAsReactStr ,
  initialContext ,
  context ,
  Provider ,
  useLocaleContext ,
  useLocale ,
  
}
/* en Not a pure module */
