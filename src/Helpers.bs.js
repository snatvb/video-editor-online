// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Belt_List from "rescript/lib/es6/belt_List.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function thenTap(promise, fn) {
  return promise.then(function (x) {
              Curry._1(fn, x);
              return Promise.resolve(x);
            });
}

function eq(a, b) {
  return a === b;
}

function identity(x) {
  return x;
}

function call(fn) {
  return Curry._1(fn, undefined);
}

function sideEffect(a, fn) {
  Curry._1(fn, a);
  return a;
}

function map(from, to_, fn) {
  var result = [];
  for(var i = from; i <= to_; ++i){
    result.push(Curry._1(fn, i));
  }
  return result;
}

var $$Range = {
  map: map
};

var __prop = (function(obj, key) { return obj[key] });

var prop = __prop;

function propSafe(obj, key) {
  return Caml_option.undefined_to_opt((obj[key]));
}

function __path(_obj, path_, _currentIndex) {
  while(true) {
    var currentIndex = _currentIndex;
    var obj = _obj;
    if (obj === undefined) {
      return ;
    }
    if ((path_.length - 1 | 0) === currentIndex) {
      return (obj[path_[currentIndex]]);
    }
    _currentIndex = currentIndex + 1 | 0;
    _obj = (obj[path_[currentIndex]]);
    continue ;
  };
}

function path(obj, path$1) {
  return __path(obj, path$1, 0);
}

function filterOption(a, predicate) {
  if (a === undefined) {
    return ;
  }
  var a$1 = Caml_option.valFromOption(a);
  if (Curry._1(predicate, a$1)) {
    return Caml_option.some(a$1);
  }
  
}

function optionOr(a, b) {
  if (a !== undefined) {
    return Caml_option.some(Caml_option.valFromOption(a));
  } else {
    return Caml_option.some(b);
  }
}

function joinList(list, separator) {
  return Belt_List.reduce(list, "", (function (acc, str) {
                  return acc + separator + str;
                })).slice(1);
}

var animationGreetingKey = "greetingDone";

function loadNeedGreeting(param) {
  return Belt_Option.mapWithDefault(Caml_option.null_to_opt(localStorage.getItem(animationGreetingKey)), false, (function (x) {
                return x === "true";
              }));
}

function setNeedGreeting(animationDone) {
  localStorage.setItem(animationGreetingKey, animationDone ? "true" : "false");
  
}

var tap = sideEffect;

export {
  thenTap ,
  eq ,
  identity ,
  call ,
  sideEffect ,
  tap ,
  $$Range ,
  __prop ,
  prop ,
  propSafe ,
  __path ,
  path ,
  filterOption ,
  optionOr ,
  joinList ,
  animationGreetingKey ,
  loadNeedGreeting ,
  setNeedGreeting ,
  
}
/* No side effect */
